/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["require","exports","jquery","TYPO3/CMS/Backend/DocumentSaveActions","TYPO3/CMS/Backend/Modal","TYPO3/CMS/Backend/Utility/MessageUtility","tablesort"],(function(e,a,t,l,s,r){"use strict";class n{constructor(){this.allCheckedStatus=!1,this.actOnChangedTaskClass=e=>{let a=e.val();a=a.toLowerCase().replace(/\\/g,"-"),t(".extraFields").hide(),t(".extra_fields_"+a).show()},this.actOnChangedTaskType=e=>{this.toggleFieldsByTaskType(t(e.currentTarget).val())},this.actOnChangeSchedulerTableGarbageCollectionAllTables=e=>{let a=t("#task_tableGarbageCollection_numberOfDays"),l=t("#task_tableGarbageCollection_table");if(e.prop("checked"))l.prop("disabled",!0),a.prop("disabled",!0);else{let e=parseInt(a.val(),10);if(e<1){let a=l.val();void 0!==defaultNumberOfDays[a]&&(e=defaultNumberOfDays[a])}l.prop("disabled",!1),e>0&&a.prop("disabled",!1)}},this.actOnChangeSchedulerTableGarbageCollectionTable=e=>{let a=t("#task_tableGarbageCollection_numberOfDays");defaultNumberOfDays[e.val()]>0?(a.prop("disabled",!1),a.val(defaultNumberOfDays[e.val()])):(a.prop("disabled",!0),a.val(0))},this.checkOrUncheckAllCheckboxes=e=>(e.parents(".tx_scheduler_mod1_table").find(":checkbox").prop("checked",!this.allCheckedStatus),this.allCheckedStatus=!this.allCheckedStatus,!1),this.toggleFieldsByTaskType=e=>{e=parseInt(e+"",10),t("#task_end_col").toggle(2===e),t("#task_frequency_row").toggle(2===e)},this.toggleTaskGroups=e=>{let a=e.data("task-group-id");t("#recordlist-task-group-"+a).collapse("toggle")},this.initializeEvents=()=>{t(".checkall").on("click",e=>{this.checkOrUncheckAllCheckboxes(t(e.currentTarget))}),t("#task_class").change(e=>{this.actOnChangedTaskClass(t(e.currentTarget))}),t("#task_type").change(this.actOnChangedTaskType),t("#task_tableGarbageCollection_allTables").change(e=>{this.actOnChangeSchedulerTableGarbageCollectionAllTables(t(e.currentTarget))}),t("#task_tableGarbageCollection_table").change(e=>{this.actOnChangeSchedulerTableGarbageCollectionTable(t(e.currentTarget))}),t("[data-update-task-frequency]").change(e=>{const a=t(e.currentTarget);t("#task_frequency").val(a.val()),a.val(a.attr("value")).blur()});const e=document.querySelector("table.taskGroup-table");null!==e&&new Tablesort(e),t(document).on("click",".t3js-element-browser",e=>{e.preventDefault();const a=e.currentTarget;s.advanced({type:s.types.iframe,content:a.href+"&mode="+a.dataset.mode+"&bparams="+a.dataset.params,size:s.sizes.large})}),window.addEventListener("message",this.listenOnElementBrowser)},this.initializeDefaultStates=()=>{let e=t("#task_type");e.length&&this.toggleFieldsByTaskType(e.val());let a=t("#task_class");a.length&&(this.actOnChangedTaskClass(a),n.updateElementBrowserTriggers())},this.listenOnElementBrowser=e=>{if(!r.MessageUtility.verifyOrigin(e.origin))throw"Denied message sent by "+e.origin;if("typo3:elementBrowser:elementAdded"===e.data.actionName){if(void 0===e.data.fieldName)throw"fieldName not defined in message";if(void 0===e.data.value)throw"value not defined in message";const a=e.data.value.split("_");document.querySelector('input[name="'+e.data.fieldName+'"]').value=a[1]}},this.initializeEvents(),this.initializeDefaultStates(),l.getInstance().addPreSubmitCallback(()=>{let e=t("#task_class").val();e=e.toLowerCase().replace(/\\/g,"-"),t(".extraFields").appendTo(t("#extraFieldsHidden")),t(".extra_fields_"+e).appendTo(t("#extraFieldsSection"))})}static updateElementBrowserTriggers(){document.querySelectorAll(".t3js-element-browser").forEach(e=>{const a=document.getElementById(e.dataset.triggerFor);e.dataset.params=a.name+"|||pages"})}}return new n}));